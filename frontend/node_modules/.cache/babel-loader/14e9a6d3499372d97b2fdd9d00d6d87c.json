{"remainingRequest":"/data/vssh/frontend/node_modules/babel-loader/lib/index.js!/data/vssh/frontend/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/data/vssh/frontend/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/data/vssh/frontend/src/components/HelloWorld.vue?vue&type=template&id=469af010","dependencies":[{"path":"/data/vssh/frontend/src/components/HelloWorld.vue","mtime":1643007267830},{"path":"/data/vssh/frontend/babel.config.js","mtime":1642990612224},{"path":"/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1642990596778},{"path":"/data/vssh/frontend/node_modules/babel-loader/lib/index.js","mtime":1642990597524},{"path":"/data/vssh/frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1642990596737},{"path":"/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1642990596778},{"path":"/data/vssh/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1642990595732}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJjb25zb2xlIiwKICBpZDogInRlcm1pbmFsIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEpOwp9"},{"version":3,"sources":["/data/vssh/frontend/src/components/HelloWorld.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC,S;AAAU,EAAA,EAAE,EAAC;;;uBAAxB,mBAAA,CAAyC,KAAzC,EAAA,UAAA,C","sourcesContent":["<template>\n  <div class=\"console\" id=\"terminal\"></div>\n</template>\n<script>\nimport { Terminal } from \"xterm\";\nimport * as attach from \"xterm/lib/addons/attach/attach\";\nimport * as fit from \"xterm/lib/addons/fit/fit\";\nexport default {\n  name: \"webssh\",\n  data() {\n    return {\n      term: null,\n      terminalSocket: null,\n      order: \"\",\n    };\n  },\n  methods: {},\n  mounted() {\n    //实例化一个websocket，用于和django江湖\n    this.terminalSocket = new WebSocket(\"ws://127.0.0.1:8000/web/\");\n    //获取到后端传回的信息\n    this.terminalSocket.onmessage = (res) => {\n      const reader = new window.FileReader();\n      reader.onload = () => this.term.write(reader.result);\n      reader.readAsText(res.data, \"utf-8\");\n      console.log(res.data);\n      // var message = JSON.parse(res.data);\n      //将传回来的数据显示在xterm里\n      // this.term.writeln(\"\\r\\n\" + res.data);\n      //重置要发送的信息\n      this.order = \"\";\n      //换行，显示下一个开头\n      // this.term.write(\"\\r\\n$ \");\n    };\n    //ws连接的时候\n    // this.terminalSocket.onopen = function(){\n    //     console.log('websocket is Connected...')\n    // }\n    //ws关闭的时候\n    // this.terminalSocket.onclose = function(){\n    //     console.log('websocket is Closed...')\n    // }\n    //ws错误的时候\n    // this.terminalSocket.onerror = function(){\n    //     console.log('damn Websocket is broken!')\n    // }\n    // this.term.attach(this.terminalSocket)\n    // 绑定xterm到ws流中 },\n\n    let terminalContainer = document.getElementById(\"terminal\");\n    //创建xterm实例\n    this.term = new Terminal({\n      rendererType: \"canvas\",\n      convertEol: true,\n      scrollback: 100,\n      fontSize: 14,\n      disableStdin: false,\n      cursorStyle: \"block\",\n      cursorBlink: true, // 显示光标\n      tabStopWidth: 4,\n      theme: {\n        foreground: \"yellow\",\n        background: \"#060101\",\n        cursor: \"help\",\n      },\n    }); // 创建一个新的Terminal对象\n\n    this.term.open(terminalContainer); // 将term挂载到dom节点上\n\n    //在xterm上显示命令行提示\n    this.term.write(\"$ \");\n    //监听xterm的键盘事件\n    this.term.on(\"key\", (key, ev) => {\n      // key是输入的字符 ev是键盘按键事件\n      console.log(\"key==========\", ev.keyCode);\n      this.term.write(key); // 将输入的字符打印到黑板中\n      if (ev.keyCode == 13) {\n        // 输入回车\n        // console.log(\"输入回车\")\n        // this.term.write('$ ')\n        // console.log(this.order)\n\n        //使用webscoket将数据发送到django\n        const data = this.order;\n        this.terminalSocket.send(JSON.stringify({ data }));\n        // this.order=''\n        console.log(\"里面的order\", this.order);\n      } else if (ev.keyCode == 8) {\n        //删除按钮\n        //截取字符串[0,lenth-1]\n        this.order = this.order.substr(0, this.order.length - 1);\n\n        //清空当前一条的命令\n        this.term.write(\"\\x1b[2K\\r\");\n        //简化当前的新的命令显示上\n        this.term.write(\"$ \" + this.order);\n\n        console.log(\"截取的字符串\" + this.order);\n        typeof this.order;\n      } else {\n        // 将每次输入的字符拼凑起来\n        this.order += key;\n        console.log(\"外面的order\", this.order);\n      }\n    });\n  },\n};\n</script>"],"sourceRoot":""}]}