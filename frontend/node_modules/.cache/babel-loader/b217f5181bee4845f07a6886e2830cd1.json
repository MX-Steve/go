{"remainingRequest":"/data/vssh/frontend/node_modules/babel-loader/lib/index.js!/data/vssh/frontend/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/data/vssh/frontend/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/data/vssh/frontend/src/components/HelloWorld2.vue?vue&type=template&id=e64a895c&scoped=true","dependencies":[{"path":"/data/vssh/frontend/src/components/HelloWorld2.vue","mtime":1643007529647},{"path":"/data/vssh/frontend/babel.config.js","mtime":1642990612224},{"path":"/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1642990596778},{"path":"/data/vssh/frontend/node_modules/babel-loader/lib/index.js","mtime":1642990597524},{"path":"/data/vssh/frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1642990596737},{"path":"/data/vssh/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1642990596778},{"path":"/data/vssh/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1642990595732}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoU2NvcGVJZCA9IGZ1bmN0aW9uIF93aXRoU2NvcGVJZChuKSB7CiAgcmV0dXJuIF9wdXNoU2NvcGVJZCgiZGF0YS12LWU2NGE4OTVjIiksIG4gPSBuKCksIF9wb3BTY29wZUlkKCksIG47Cn07Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImNvbnNvbGUiLAogIGlkOiAidGVybWluYWwiLAogICJlbGVtZW50LWxvYWRpbmctdGV4dCI6ICLmi7zlkb3ov57mjqXkuK0iCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9kaXJlY3RpdmVfbG9hZGluZyA9IF9yZXNvbHZlRGlyZWN0aXZlKCJsb2FkaW5nIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIG51bGwsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgbnVsbCwgNTEyCiAgLyogTkVFRF9QQVRDSCAqLwogICksIFtbX2RpcmVjdGl2ZV9sb2FkaW5nLCAkZGF0YS5sb2FkaW5nXV0pXSk7Cn0="},{"version":3,"sources":["/data/vssh/frontend/src/components/HelloWorld2.vue"],"names":[],"mappings":";;;;;;;AAGM,EAAA,KAAK,EAAC,S;AACN,EAAA,EAAE,EAAC,U;AAEH,0BAAqB;;;;;uBALzB,mBAAA,CAOM,KAPN,EAOM,IAPN,EAOM,C,gBANJ,mBAAA,CAKO,KALP,EAAA,UAAA,EAKO,IALP,EAKO;AAAA;AALP,G,EAKO,C,qBAFM,KAAA,CAAA,O,CAEN,C,CACH,CAPN,C","sourcesContent":["<template>\n  <div>\n    <div\n      class=\"console\"\n      id=\"terminal\"\n      v-loading=\"loading\"\n      element-loading-text=\"拼命连接中\"\n    ></div>\n  </div>\n</template>\n<script>\nimport \"xterm/css/xterm.css\";\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport { AttachAddon } from \"xterm-addon-attach\";\n\nexport default {\n  name: \"SSH\",\n  data() {\n    return {\n      loading: true,\n      term: null,\n      socket: null,\n      rows: 150,\n      cmd: \"\",\n    };\n  },\n  mounted() {\n    this.initSocket();\n  },\n  methods: {\n    //Xterm主题\n    initTerm() {\n      const term = new Terminal({\n        rendererType: \"canvas\", //渲染类型\n        rows: this.rows, //行数\n        // cols: this.cols,// 设置之后会输入多行之后覆盖现象\n        convertEol: true, //启用时，光标将设置为下一行的开头\n        scrollback: 100, //终端中的回滚量\n        fontSize: 14, //字体大小\n        disableStdin: false, //是否应禁用输入。\n        cursorStyle: \"block\", //光标样式\n        cursorBlink: true, //光标闪烁\n        scrollback: 50,\n        tabStopWidth: 4,\n        theme: {\n          foreground: \"yellow\", //字体\n          background: \"#060101\", //背景色\n          cursor: \"help\", //设置光标\n        },\n      });\n      this.loading = false;\n      const attachAddon = new AttachAddon(this.socket);\n      const fitAddon = new FitAddon();\n      term.loadAddon(attachAddon);\n      term.loadAddon(fitAddon);\n      term.open(document.getElementById(\"terminal\"));\n      fitAddon.fit();\n      term.focus();\n      let _this = this;\n      //限制和后端交互，只有输入回车键才显示结果\n      term.prompt = () => {\n        term.write(\"\\r\\n\");\n      };\n      term.prompt();\n      function runFakeTerminal(_this) {\n        if (term._initialized) {\n          return;\n        }\n        // 初始化\n        term._initialized = true;\n        term.writeln(\n          \"$ Welcome to \\x1B[1;3;31m our \" +\n            (_this.instance_name\n              ? _this.instance_name + \" instance\"\n              : \"instance\") +\n            \" \\x1B[0m \\r\"\n        );\n        term.write(\"\\r$ \");\n        term.onData(function (key) {\n          console.log(key.charCodeAt());\n          // 上下左右方向键: 27\n          if (key.charCodeAt() != 27) {\n            if (key.charCodeAt() == 3) {\n              term.write(\"\\x1b[2K\\r\");\n              term.write(\"$ \");\n            } else {\n              term.write(key);\n              _this.cmd += key;\n              if (key == \"\\r\\n\" || key == \"\\r\") {\n                let order = {\n                  Data: key,\n                  Op: \"stdin\",\n                };\n\n                if (_this.cmd.indexOf(\"clear\") !== -1) {\n                  term.clear();\n                  _this.cmd = \"\"\n                } else {\n                  _this.onSend(order);\n                  term.write(\"\\r\\n\");\n                }\n              }\n            }\n          } else {\n            term.write(\"\\x1b[2K\\r\");\n            term.write(\"$ \");\n          }\n        });\n        _this.term = term;\n      }\n      runFakeTerminal(_this);\n    },\n    //webShell主题\n    initSocket() {\n      this.socket = new WebSocket(\"ws://127.0.0.1:8000/web/\");\n      this.socketOnClose();\n      this.socketOnOpen();\n      this.socketOnError();\n    },\n    //webshell链接成功之后操作\n    socketOnOpen() {\n      this.socket.onopen = () => {\n        // 链接成功后\n        console.log(\"socket 连接成功\");\n        this.initTerm();\n      };\n    },\n    //webshell关闭之后操作\n    socketOnClose() {\n      this.socket.onclose = () => {\n        console.log(\"close socket\");\n      };\n    },\n    //webshell错误信息\n    socketOnError() {\n      this.socket.onerror = () => {\n        console.log(\"socket 链接失败\");\n      };\n    },\n    //特殊处理\n    onSend(data) {\n      data = JSON.stringify(data);\n    },\n    //删除左右两端的空格\n    trim(str) {\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n  },\n  beforeDestroy() {\n    this.socket.close();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#terminal {\n  width: 100%;\n  height: 650px;\n}\n</style>"],"sourceRoot":""}]}