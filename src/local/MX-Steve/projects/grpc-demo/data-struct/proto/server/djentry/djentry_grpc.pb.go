// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package djentry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DjentryStatisticsClient is the client API for DjentryStatistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DjentryStatisticsClient interface {
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type djentryStatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewDjentryStatisticsClient(cc grpc.ClientConnInterface) DjentryStatisticsClient {
	return &djentryStatisticsClient{cc}
}

func (c *djentryStatisticsClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/DjentryStatistics/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DjentryStatisticsServer is the server API for DjentryStatistics service.
// All implementations must embed UnimplementedDjentryStatisticsServer
// for forward compatibility
type DjentryStatisticsServer interface {
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	mustEmbedUnimplementedDjentryStatisticsServer()
}

// UnimplementedDjentryStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedDjentryStatisticsServer struct {
}

func (UnimplementedDjentryStatisticsServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedDjentryStatisticsServer) mustEmbedUnimplementedDjentryStatisticsServer() {}

// UnsafeDjentryStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DjentryStatisticsServer will
// result in compilation errors.
type UnsafeDjentryStatisticsServer interface {
	mustEmbedUnimplementedDjentryStatisticsServer()
}

func RegisterDjentryStatisticsServer(s grpc.ServiceRegistrar, srv DjentryStatisticsServer) {
	s.RegisterService(&DjentryStatistics_ServiceDesc, srv)
}

func _DjentryStatistics_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DjentryStatisticsServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DjentryStatistics/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DjentryStatisticsServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DjentryStatistics_ServiceDesc is the grpc.ServiceDesc for DjentryStatistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DjentryStatistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DjentryStatistics",
	HandlerType: (*DjentryStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _DjentryStatistics_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schemas/server/djentry.proto",
}
